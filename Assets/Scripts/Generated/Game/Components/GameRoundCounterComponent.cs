//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity roundCounterEntity { get { return GetGroup(GameMatcher.RoundCounter).GetSingleEntity(); } }
    public RoundCounterComponent roundCounter { get { return roundCounterEntity.roundCounter; } }
    public bool hasRoundCounter { get { return roundCounterEntity != null; } }

    public GameEntity SetRoundCounter(int newRound) {
        if (hasRoundCounter) {
            throw new Entitas.EntitasException("Could not set RoundCounter!\n" + this + " already has an entity with RoundCounterComponent!",
                "You should check if the context already has a roundCounterEntity before setting it or use context.ReplaceRoundCounter().");
        }
        var entity = CreateEntity();
        entity.AddRoundCounter(newRound);
        return entity;
    }

    public void ReplaceRoundCounter(int newRound) {
        var entity = roundCounterEntity;
        if (entity == null) {
            entity = SetRoundCounter(newRound);
        } else {
            entity.ReplaceRoundCounter(newRound);
        }
    }

    public void RemoveRoundCounter() {
        roundCounterEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RoundCounterComponent roundCounter { get { return (RoundCounterComponent)GetComponent(GameComponentsLookup.RoundCounter); } }
    public bool hasRoundCounter { get { return HasComponent(GameComponentsLookup.RoundCounter); } }

    public void AddRoundCounter(int newRound) {
        var index = GameComponentsLookup.RoundCounter;
        var component = CreateComponent<RoundCounterComponent>(index);
        component.round = newRound;
        AddComponent(index, component);
    }

    public void ReplaceRoundCounter(int newRound) {
        var index = GameComponentsLookup.RoundCounter;
        var component = CreateComponent<RoundCounterComponent>(index);
        component.round = newRound;
        ReplaceComponent(index, component);
    }

    public void RemoveRoundCounter() {
        RemoveComponent(GameComponentsLookup.RoundCounter);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRoundCounter;

    public static Entitas.IMatcher<GameEntity> RoundCounter {
        get {
            if (_matcherRoundCounter == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RoundCounter);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRoundCounter = matcher;
            }

            return _matcherRoundCounter;
        }
    }
}
